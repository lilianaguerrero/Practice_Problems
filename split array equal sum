'''const testCases = [
  [1,2,3,4,5,6,21], => [[1,2,3,4,5,6][21]]
  [1,90, 50, 30, 5, 3, 2, 1 ], => [[91][50, 30, 5, 3, 2, 1 ]]
  [1, 50, 900, 1000 ], => return None
];
'''
#find if it is possible to split the array into two and have both new arrays equal to the same number without reordering. return both arrays.


# approach => rolling_sum keep track of what's happening between numbers
#             rolling_sum = [0,1,3,6,10,15,21,42]
#                    nums = [1,2,3,4,5,6,21]
def split_equal_sum_arr(nums):
    rolling_sum = [0 for number in range(len(nums)+1)]

    result_array = []
    for index in range(1,len(nums)+1):
        if rolling_sum[index] == rolling_sum[index+1]: 
            # rolling_sum[index] => nums[:index-1]
            #rolling_sum[index+1] => nums[index:]
            result_array.append(nums[:index-1])
            result_array.append(nums[index:])
            
    print(result_array)

split_equal_sum_arr([1,2,3,4,5,6,21])






